{"ast":null,"code":"const getRandomInt = max => {\n  return Math.floor(Math.random() * max);\n};\n\n//Check if there are exactly 2 cards in the array\nconst check = (set, nr, card) => {\n  var count = 1;\n  for (var m = 0; m < nr; m++) {\n    if (card == set[m]) count++;\n  }\n  return count;\n};\nfunction getRandomCardsOrder(origArray, numberOfCards) {\n  var newArray = [];\n  var count = 0;\n  var card = '';\n  for (var i = 0; i < numberOfCards; i++) {\n    count = 0;\n    while (count == 0 || count > 2) {\n      card = getRandomInt(numberOfCards / 2);\n      count = check(newArray, numberOfCards, origArray[card]);\n    }\n    newArray.push(origArray[card]);\n    console.log(newArray[i] + ' count: ' + count);\n  }\n  return newArray;\n}\nexport default getRandomCardsOrder;","map":{"version":3,"names":["getRandomInt","max","Math","floor","random","check","set","nr","card","count","m","getRandomCardsOrder","origArray","numberOfCards","newArray","i","push","console","log"],"sources":["D:/Dokumenty/JS/JS/odc5_gra/react-complete-guide/src/cards/RandomCardsNum.js"],"sourcesContent":["const getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n\r\n //Check if there are exactly 2 cards in the array\r\n const check = (set, nr, card) => {\r\n     var count = 1;\r\n \r\n     for (var m=0; m<(nr); m++)\r\n     {\r\n         if (card == set[m])\r\n             count ++;\r\n     }\r\n \r\n     return count;\r\n }\r\n\r\nfunction getRandomCardsOrder(origArray, numberOfCards)\r\n{\r\n    var newArray = [];\r\n    var count = 0;\r\n    var card = '';\r\n\r\n    for (var i=0; i<(numberOfCards); i++)\r\n    {\r\n        count = 0;\r\n        while (count==0 || count>2)\r\n        {\r\n            card = getRandomInt(numberOfCards/2);\r\n            count = check(newArray, numberOfCards, origArray[card]);\r\n        }        \r\n        \r\n        newArray.push(origArray[card]);\r\n        console.log(newArray[i]+' count: '+count);\r\n        \r\n    }\r\n    return newArray;\r\n}\r\n\r\n\r\n\r\n export default getRandomCardsOrder;"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,GAAG,IAAK;EAC1B,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,GAAG,CAAC;AAC1C,CAAC;;AAGA;AACA,MAAMI,KAAK,GAAG,CAACC,GAAG,EAAEC,EAAE,EAAEC,IAAI,KAAK;EAC7B,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAEH,EAAG,EAAEG,CAAC,EAAE,EACzB;IACI,IAAIF,IAAI,IAAIF,GAAG,CAACI,CAAC,CAAC,EACdD,KAAK,EAAG;EAChB;EAEA,OAAOA,KAAK;AAChB,CAAC;AAEF,SAASE,mBAAmB,CAACC,SAAS,EAAEC,aAAa,EACrD;EACI,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIL,KAAK,GAAG,CAAC;EACb,IAAID,IAAI,GAAG,EAAE;EAEb,KAAK,IAAIO,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAEF,aAAc,EAAEE,CAAC,EAAE,EACpC;IACIN,KAAK,GAAG,CAAC;IACT,OAAOA,KAAK,IAAE,CAAC,IAAIA,KAAK,GAAC,CAAC,EAC1B;MACID,IAAI,GAAGR,YAAY,CAACa,aAAa,GAAC,CAAC,CAAC;MACpCJ,KAAK,GAAGJ,KAAK,CAACS,QAAQ,EAAED,aAAa,EAAED,SAAS,CAACJ,IAAI,CAAC,CAAC;IAC3D;IAEAM,QAAQ,CAACE,IAAI,CAACJ,SAAS,CAACJ,IAAI,CAAC,CAAC;IAC9BS,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACC,CAAC,CAAC,GAAC,UAAU,GAACN,KAAK,CAAC;EAE7C;EACA,OAAOK,QAAQ;AACnB;AAIC,eAAeH,mBAAmB"},"metadata":{},"sourceType":"module"}