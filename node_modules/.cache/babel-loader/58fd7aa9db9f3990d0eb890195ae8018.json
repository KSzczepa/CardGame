{"ast":null,"code":"import React from 'react';\nconst getRandomCardsOrder = (origArray, numberOfCards) => {\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * max);\n  };\n\n  //Check if there are exactly 2 cards in the array\n  const check = (set, nr, card) => {\n    var count = 1;\n    for (var m = 0; m < nr; m++) {\n      if (card == set[m]) count++;\n    }\n    return count;\n  };\n  var newArray = [];\n  var count = 0;\n  var card = '';\n  for (var i = 0; i < numberOfCards; i++) {\n    count = 0;\n    while (count == 0 || count > 2) {\n      card = getRandomInt(numberOfCards / 2);\n      count = check(newArray, numberOfCards, origArray[card]);\n    }\n    newArray.push(origArray[card]);\n    console.log(newArray[i] + ' count: ' + count);\n  }\n  return newArray;\n};\nexport default getRandomCardsOrder;","map":{"version":3,"names":["React","getRandomCardsOrder","origArray","numberOfCards","getRandomInt","max","Math","floor","random","check","set","nr","card","count","m","newArray","i","push","console","log"],"sources":["D:/Dokumenty/JS/JS/odc5_gra/react-complete-guide/src/cards/RandomCardsOrder.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst getRandomCardsOrder = (origArray, numberOfCards) => {\r\n\r\n    const getRandomInt = (max) => {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    //Check if there are exactly 2 cards in the array\r\n    const check = (set, nr, card) => {\r\n        var count = 1;\r\n\r\n        for (var m = 0; m < (nr); m++) {\r\n            if (card == set[m])\r\n                count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    var newArray = [];\r\n    var count = 0;\r\n    var card = '';\r\n\r\n    for (var i = 0; i < (numberOfCards); i++) {\r\n        count = 0;\r\n        while (count == 0 || count > 2) {\r\n            card = getRandomInt(numberOfCards / 2);\r\n            count = check(newArray, numberOfCards, origArray[card]);\r\n        }\r\n\r\n        newArray.push(origArray[card]);\r\n        console.log(newArray[i] + ' count: ' + count);\r\n\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport default getRandomCardsOrder;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,mBAAmB,GAAG,CAACC,SAAS,EAAEC,aAAa,KAAK;EAEtD,MAAMC,YAAY,GAAIC,GAAG,IAAK;IAC1B,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,GAAG,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMI,KAAK,GAAG,CAACC,GAAG,EAAEC,EAAE,EAAEC,IAAI,KAAK;IAC7B,IAAIC,KAAK,GAAG,CAAC;IAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIH,EAAG,EAAEG,CAAC,EAAE,EAAE;MAC3B,IAAIF,IAAI,IAAIF,GAAG,CAACI,CAAC,CAAC,EACdD,KAAK,EAAE;IACf;IAEA,OAAOA,KAAK;EAChB,CAAC;EAED,IAAIE,QAAQ,GAAG,EAAE;EACjB,IAAIF,KAAK,GAAG,CAAC;EACb,IAAID,IAAI,GAAG,EAAE;EAEb,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIb,aAAc,EAAEa,CAAC,EAAE,EAAE;IACtCH,KAAK,GAAG,CAAC;IACT,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC5BD,IAAI,GAAGR,YAAY,CAACD,aAAa,GAAG,CAAC,CAAC;MACtCU,KAAK,GAAGJ,KAAK,CAACM,QAAQ,EAAEZ,aAAa,EAAED,SAAS,CAACU,IAAI,CAAC,CAAC;IAC3D;IAEAG,QAAQ,CAACE,IAAI,CAACf,SAAS,CAACU,IAAI,CAAC,CAAC;IAC9BM,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACC,CAAC,CAAC,GAAG,UAAU,GAAGH,KAAK,CAAC;EAEjD;EACA,OAAOE,QAAQ;AACnB,CAAC;AAED,eAAed,mBAAmB"},"metadata":{},"sourceType":"module"}