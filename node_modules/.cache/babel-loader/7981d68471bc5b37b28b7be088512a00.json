{"ast":null,"code":"import React from 'react';\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * max);\n};\n\n//Check if there are exactly 2 cards in the array\nconst check = (set, nr, card) => {\n  var count = 1;\n  for (var m = 0; m < nr; m++) {\n    if (card == set[m]) count++;\n  }\n  return count;\n};\nfunction getRandomCardsOrder(origArray, numberOfCards) {\n  var newArray = [];\n  var count = 0;\n  var card = '';\n  for (var i = 0; i < numberOfCards; i++) {\n    count = 0;\n    while (count == 0 || count > 2) {\n      card = getRandomInt(parseInt(numberOfCards) / 2);\n      count = check(newArray, parseInt(numberOfCards), origArray[card]);\n    }\n    newArray.push(origArray[card]);\n    console.log(newArray[i] + ' count: ' + count);\n  }\n  return newArray;\n}\nexport default getRandomCardsOrder;","map":{"version":3,"names":["React","getRandomInt","max","Math","floor","random","check","set","nr","card","count","m","getRandomCardsOrder","origArray","numberOfCards","newArray","i","parseInt","push","console","log"],"sources":["D:/Dokumenty/JS/JS/odc5_gra/react-complete-guide/src/cards/RandomCardsOrder.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n//Check if there are exactly 2 cards in the array\r\nconst check = (set, nr, card) => {\r\n    var count = 1;\r\n\r\n    for (var m = 0; m < (nr); m++) {\r\n        if (card == set[m])\r\n            count++;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\n\r\nfunction getRandomCardsOrder(origArray, numberOfCards) {\r\n\r\n    \r\n\r\n\r\n    var newArray = [];\r\n    var count = 0;\r\n    var card = '';\r\n\r\n    for (var i = 0; i < (numberOfCards); i++) {\r\n        count = 0;\r\n        while (count == 0 || count > 2) {\r\n            card = getRandomInt(parseInt(numberOfCards)/2);\r\n            count = check(newArray, parseInt(numberOfCards), origArray[card]);\r\n        }\r\n\r\n        newArray.push(origArray[card]);\r\n        console.log(newArray[i] + ' count: ' + count);\r\n\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport default getRandomCardsOrder;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAIC,GAAG,IAAK;EAC1B,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,GAAG,CAAC;AAC1C,CAAC;;AAED;AACA,MAAMI,KAAK,GAAG,CAACC,GAAG,EAAEC,EAAE,EAAEC,IAAI,KAAK;EAC7B,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIH,EAAG,EAAEG,CAAC,EAAE,EAAE;IAC3B,IAAIF,IAAI,IAAIF,GAAG,CAACI,CAAC,CAAC,EACdD,KAAK,EAAE;EACf;EAEA,OAAOA,KAAK;AAChB,CAAC;AAGD,SAASE,mBAAmB,CAACC,SAAS,EAAEC,aAAa,EAAE;EAKnD,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIL,KAAK,GAAG,CAAC;EACb,IAAID,IAAI,GAAG,EAAE;EAEb,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIF,aAAc,EAAEE,CAAC,EAAE,EAAE;IACtCN,KAAK,GAAG,CAAC;IACT,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC5BD,IAAI,GAAGR,YAAY,CAACgB,QAAQ,CAACH,aAAa,CAAC,GAAC,CAAC,CAAC;MAC9CJ,KAAK,GAAGJ,KAAK,CAACS,QAAQ,EAAEE,QAAQ,CAACH,aAAa,CAAC,EAAED,SAAS,CAACJ,IAAI,CAAC,CAAC;IACrE;IAEAM,QAAQ,CAACG,IAAI,CAACL,SAAS,CAACJ,IAAI,CAAC,CAAC;IAC9BU,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACC,CAAC,CAAC,GAAG,UAAU,GAAGN,KAAK,CAAC;EAEjD;EACA,OAAOK,QAAQ;AACnB;AAEA,eAAeH,mBAAmB"},"metadata":{},"sourceType":"module"}