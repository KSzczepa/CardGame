{"ast":null,"code":"import React from 'react';\nfunction getRandomCardsOrder(origArray, numberOfCards) {\n  var newArray = [];\n  var count = 0;\n  var card = '';\n  for (var i = 0; i < numberOfCards; i++) {\n    count = 0;\n    while (count == 0 || count > 2) {\n      //card = getRandomInt(parseInt(numberOfCards)/2);\n      card = Math.floor(Math.random() * numberOfCards / 2);\n      count = check(newArray, parseInt(numberOfCards), origArray[card]);\n    }\n    newArray.push(origArray[card]);\n    console.log(newArray[i] + ' count: ' + count);\n  }\n  return newArray;\n}\n\n//Check if there are exactly 2 cards in the array\nconst check = (set, nr, card) => {\n  var count = 1;\n  for (var m = 0; m < nr; m++) {\n    if (card == set[m]) count++;\n  }\n  return count;\n};\nexport default getRandomCardsOrder;","map":{"version":3,"names":["React","getRandomCardsOrder","origArray","numberOfCards","newArray","count","card","i","Math","floor","random","check","parseInt","push","console","log","set","nr","m"],"sources":["D:/Dokumenty/JS/JS/odc5_gra/react-complete-guide/src/cards/RandomCardsOrder.js"],"sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction getRandomCardsOrder(origArray, numberOfCards) {\r\n\r\n    \r\n\r\n\r\n    var newArray = [];\r\n    var count = 0;\r\n    var card = '';\r\n\r\n    for (var i = 0; i < (numberOfCards); i++) {\r\n        count = 0;\r\n        while (count == 0 || count > 2) {\r\n            //card = getRandomInt(parseInt(numberOfCards)/2);\r\n            card = Math.floor(Math.random() * (numberOfCards)/2);\r\n            count = check(newArray, parseInt(numberOfCards), origArray[card]);\r\n        }\r\n\r\n        newArray.push(origArray[card]);\r\n        console.log(newArray[i] + ' count: ' + count);\r\n\r\n    }\r\n    return newArray;\r\n}\r\n\r\n\r\n//Check if there are exactly 2 cards in the array\r\nconst check = (set, nr, card) => {\r\n    var count = 1;\r\n\r\n    for (var m = 0; m < (nr); m++) {\r\n        if (card == set[m])\r\n            count++;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default getRandomCardsOrder;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAKzB,SAASC,mBAAmB,CAACC,SAAS,EAAEC,aAAa,EAAE;EAKnD,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,IAAI,GAAG,EAAE;EAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIJ,aAAc,EAAEI,CAAC,EAAE,EAAE;IACtCF,KAAK,GAAG,CAAC;IACT,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC5B;MACAC,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAIP,aAAc,GAAC,CAAC,CAAC;MACpDE,KAAK,GAAGM,KAAK,CAACP,QAAQ,EAAEQ,QAAQ,CAACT,aAAa,CAAC,EAAED,SAAS,CAACI,IAAI,CAAC,CAAC;IACrE;IAEAF,QAAQ,CAACS,IAAI,CAACX,SAAS,CAACI,IAAI,CAAC,CAAC;IAC9BQ,OAAO,CAACC,GAAG,CAACX,QAAQ,CAACG,CAAC,CAAC,GAAG,UAAU,GAAGF,KAAK,CAAC;EAEjD;EACA,OAAOD,QAAQ;AACnB;;AAGA;AACA,MAAMO,KAAK,GAAG,CAACK,GAAG,EAAEC,EAAE,EAAEX,IAAI,KAAK;EAC7B,IAAID,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAID,EAAG,EAAEC,CAAC,EAAE,EAAE;IAC3B,IAAIZ,IAAI,IAAIU,GAAG,CAACE,CAAC,CAAC,EACdb,KAAK,EAAE;EACf;EAEA,OAAOA,KAAK;AAChB,CAAC;AAED,eAAeJ,mBAAmB"},"metadata":{},"sourceType":"module"}